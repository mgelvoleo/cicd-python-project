name: CI/CD Pipeline - Python to Kubernetes

on:
  push:
    branches: [ "main" ]

  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      
      - name: Checkout Code
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'


      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install flake8 bandit

      # 🧪 1. Code Quality Check
      - name: Run Linter (flake8)
        run: |
          echo "🔍 Running flake8 linting..."
          flake8 . --count --max-line-length=100 --statistics

      - name: Run Unit Tests
        run: |
          echo "🧪 Running tests..."
          pytest -v
  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build Docker Image
        run: |
          IMAGE=ghcr.io/${{ github.repository }}:${{ github.sha }}
          docker build -t $IMAGE .
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV

      - name: Push Docker Image
        run: docker push ${{ env.IMAGE }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'latest'

      - name: Configure Kubeconfig
        run: echo "${{ secrets.KUBECONFIG }}" > kubeconfig && export KUBECONFIG=$(pwd)/kubeconfig

      - name: Update Deployment Image
        run: |
          kubectl set image deployment/python-k8s-demo python-k8s-demo=${{ env.IMAGE }} --record

      - name: Verify Rollout
        run: |
          kubectl rollout status deployment/python-k8s-demo || \
          (kubectl rollout undo deployment/python-k8s-demo && exit 1)
